# Used to trigger deployment to test and prod Openshift environnment by Image stream re-tagging and labelling pod

name: Trigger deployment to test and prod Openshift environnment by Image stream re-tagging and labelling pod

on:
  workflow_dispatch:
    inputs:
      app:
        type: choice
        description: Select a component image to deploy
        options:
          - -Select-
          - search-api
          - request-api
          - dynadapter
      imageSourceEnv:
        description: "Image Source Env"
        required: true
        default: "dev"
      imageTargetEnv:
        description: "Target Release Env"
        required: true
jobs:
  oc-image-tagging:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.imageTargetEnv }}
    steps:
      - name: Git Checkout
        uses: actions/checkout@v2

        #Ubuntu 22.04 no longer includes the oc CLI by default
      - name: Install OpenShift CLI
        run: |
          curl -LO "https://mirror.openshift.com/pub/openshift-v4/clients/ocp/latest/openshift-client-linux.tar.gz"
          tar -xzf openshift-client-linux.tar.gz -C /usr/local/bin oc
          chmod +x /usr/local/bin/oc

        # Get Git latest short Sha# from the branch used. This Sha# will be used in image tagging as well as DC Pod labelling.
      - name: Get latest Git commit short SHA
        id: sha
        run: |
          shortSha=$(echo $(git rev-parse --short HEAD) | cut -c1-7)
          echo "gitsha=$shortSha" >> $GITHUB_ENV

        # Prints vital release parameters used
      - name: Print Release Variables
        run: |
          echo "Release Application: ${{ github.event.inputs.app }}"
          echo "Release Source Image: ${{ github.event.inputs.imageSourceEnv }}"
          echo "Release Target Environment: ${{ github.event.inputs.imageTargetEnv }}"
          echo "Release Git Sha: ${{env.gitsha}}"

        #Login to Openshift using OC Tools SA and Token for image stream tagging changes
      - name: Authenticate OC Tools SA
        uses: redhat-actions/oc-login@v1
        env:
          OPENSHIFT_NAMESPACE: ${{secrets.OPENSHIFT_TOOLS_NAMESPACE}}
          OPENSHIFT_USER: ${{secrets.OPENSHIFT_SA_TOOLS_DEPLOYER_NAME}}
        with:
          openshift_server_url: ${{secrets.OPENSHIFT_SERVER_URL}}
          openshift_token: ${{secrets.OPENSHIFT_SA_TOOLS_DEPLOYER_TOKEN}}
          namespace: ${{secrets.OPENSHIFT_TOOLS_NAMESPACE}}

        # Re-Tag latest dev (source) image to other env to trigger openshift deployment via DeploymentConfig
        # It also creates a tag with latest Git SHA to use it in case of rollback.
      - name: Retag image to Release Env and backup using Git SHA
        env:
          appName: ${{ github.event.inputs.app }}
          imageSourceEnv: ${{ github.event.inputs.imageSourceEnv }}
          imageTargetEnv: ${{ github.event.inputs.imageTargetEnv }}
          openshiftToolsNamespace: ${{secrets.OPENSHIFT_TOOLS_NAMESPACE}}
          openshiftIImageRegistry: ${{secrets.OPENSHIFT_INTERNAL_REPOSITORY}}
        run: |
          oc tag ${openshiftIImageRegistry}/${openshiftToolsNamespace}/${appName}:${imageSourceEnv} ${appName}:${imageTargetEnv}

      - name: Backup Prod image for any future release rollbackups
        if: ${{ github.event.inputs.imageTargetEnv == 'prod' }}
        env:
          appName: ${{ github.event.inputs.app }}
          imageTargetEnv: ${{ github.event.inputs.imageTargetEnv }}
          openshiftToolsNamespace: ${{secrets.OPENSHIFT_TOOLS_NAMESPACE}}
          openshiftIImageRegistry: ${{secrets.OPENSHIFT_INTERNAL_REPOSITORY}}
          gitSha: ${{ env.gitsha }}
        run: |
          oc tag ${openshiftIImageRegistry}/${openshiftToolsNamespace}/${appName}:${imageTargetEnv} ${appName}:prod-backup-${gitSha}

        #Login to Openshift using OC SA and Token of respective env. for Pod labelling
      - name: Authenticate OC Env Specific SA
        uses: redhat-actions/oc-login@v1
        env:
          OPENSHIFT_NAMESPACE: ${{secrets.OPENSHIFT_LICENSE_PLATE}}-${{ github.event.inputs.imageTargetEnv }}
          OPENSHIFT_USER: ${{secrets.OPENSHIFT_SA_Env_DEPLOYER_NAME}}
        with:
          openshift_server_url: ${{secrets.OPENSHIFT_SERVER_URL}}
          openshift_token: ${{secrets.OPENSHIFT_SA_ENV_DEPLOYER_TOKEN}}
          namespace: ${OPENSHIFT_NAMESPACE}

        # Labels the deployment config of the application with latest Git SHA to spin up the pods labelled in same version
      - name: Labelling DC to Git SHA
        env:
          appName: ${{ github.event.inputs.app }}
          openshiftEnvNamespace: ${{secrets.OPENSHIFT_LICENSE_PLATE}}-${{ github.event.inputs.imageTargetEnv }}
          gitSha: ${{ env.gitsha }}
        run: |
          oc patch dc ${appName} -n ${openshiftEnvNamespace} --patch '{"spec":{"template":{"metadata":{"labels":{"version":"${{ env.gitsha }}"}}}}}'

        # Wait to DC rollout to get completed
      - name: Wait for DC rollout
        env:
          appName: ${{ github.event.inputs.app }}
          openshiftEnvNamespace: ${{secrets.OPENSHIFT_LICENSE_PLATE}}-${{ github.event.inputs.imageTargetEnv }}
        run: |
          oc rollout status -n ${openshiftEnvNamespace} dc/${appName} --watch
